<?php

namespace backend\controllers;

use backend\models\FormProductFilter;
use backend\models\ProductCategory;
use backend\models\ProductKit;
use backend\models\ProductLang;
use backend\models\Variant;
use Yii;
use backend\models\Product;
use yii\data\ActiveDataProvider;
use yii\web\NotFoundHttpException;
use yii\filters\VerbFilter;

/**
 * ProductController implements the CRUD actions for Product model.
 */
class ProductController extends AppController
{
    public function behaviors()
    {
        return array_merge(parent::behaviors(),[
            'verbs' => [
                'class' => VerbFilter::className(),
                'actions' => [
                    'delete' => ['POST'],
                ],
            ],
        ]); // TODO: Change the autogenerated stub
    }

    /**
     * Lists all Product models.
     * @return mixed
     */
    public function actionIndex()
    {
        $filter = new FormProductFilter();

        $query = Product::find();
        if($filter->load(Yii::$app->request->get())){
            if($filter->model != ''){
                $query->andWhere(['like', 'model', $filter->model]);
            }
            if($filter->name != ''){
                $query->joinWith('textbylang')
                    ->andWhere(['like', 'product_lang.title', $filter->name]);
            }
            if($filter->cat_id != ''){
                $query->andWhere(['like', 'cat_id', $filter->cat_id]);
            }
        }

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort'=> [
                'defaultOrder' => [
                    'id' => SORT_DESC
                ]
            ],
        ]);

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'filter' => $filter
        ]);
    }

    /**
     * Displays a single Product model.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionView($id)
    {
        return $this->render('view', [
            'model' => $this->findModel($id),
        ]);
    }

    /**
     * Creates a new Product model.
     * If creation is successful, the browser will be redirected to the 'view' page.
     * @return mixed
     */
    public function actionCreate()
    {
        $model = new Product();

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        }

        return $this->render('create', [
            'model' => $model,
            'langs' => $this->getLangs(),
        ]);
    }

    /**
     * Updates an existing Product model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionUpdate($id)
    {
        $model = Product::find()
            ->where(['id' => $id])
            ->with([
                'kit.item'
            ])
            ->limit(1)
            ->one();

        //ecomerce label - за проханням відділу продаж
        $prodLab = $model->customLabel;
        if(!empty($prodLab)){
            $model->customLabels = [
                'zero' => $prodLab->zero,
                'one' => $prodLab->one,
                'two' => $prodLab->two,
                'three' => $prodLab->three,
                'four' => $prodLab->four,
            ];
        }

        if ($model->load(Yii::$app->request->post()) && $model->save()) {
            return $this->redirect(['index']);
        }

        return $this->render('update', [
            'model' => $model,
            'langs' => $this->getLangs(),
        ]);
    }

    /**
     * Deletes an existing Product model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $id
     * @return mixed
     * @throws NotFoundHttpException if the model cannot be found
     */
    public function actionDelete($id)
    {
        ProductCategory::deleteAll(['product_id' => $id]);
        ProductLang::deleteAll(['product_id' => $id]);
        $model = $this->findModel($id);
        $imgs = $model->getImages();
        if(!empty($imgs)){
            foreach ($imgs as $img){
                $model->removeImageNoDel($img);
            }
        }
        $model->delete();

        return $this->redirect(['index']);
    }

    /**
     * Finds the Product model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $id
     * @return Product the loaded model
     * @throws NotFoundHttpException if the model cannot be found
     */
    protected function findModel($id)
    {
        if (($model = Product::findOne($id)) !== null) {
            return $model;
        }

        throw new NotFoundHttpException('The requested page does not exist.');
    }

    /**
     * Delete image from product gallery
     */
    public function actionDelImg(){
        $img_id = Yii::$app->request->post('img_id');
        $model_id = Yii::$app->request->post('model_id');

        $docModel = Product::find()
            ->where([
                'id' => $model_id
            ])
            ->limit(1)
            ->one();
        $img = $docModel->getImageById($img_id);
        $docModel->removeImageNoDel($img);
    }

    /**
     * Get product variant list for checkbox list
     * @return string
     */
    public function actionGetVariant(){
        return $this->renderAjax('add_variant_list',[
            'variants' => Variant::getSelfArr(),
        ]);
    }

    /**
     * Render added variant to product
     * @return string
     */
    public function actionAddVariant(){
        return $this->renderAjax('added_variant_list',[
            'idIteration' => Yii::$app->request->post('idIteration'),
            'variants' => Variant::find()->where(['in', 'id', Yii::$app->request->post('ids')])->all(),
        ]);
    }

    /**
     * Render variant item
     * @return string
     */
    public function actionGetVariantElemet(){
        $langs = $this->getLangs();
        return $this->renderAjax('get_variant_elemet',[
            'langs' => $langs,
            'id' => Yii::$app->request->post('id'),
            'idIteration' => Yii::$app->request->post('idIteration'),
            'elementIterarion' => Yii::$app->request->post('elementIterarion'),
        ]);
    }


    /**
     * Add item to kit
     * @return string
     */
    public function actionAddKitElement(){
        if(Yii::$app->request->post('id') != null){
            $pKit = new ProductKit();
            $pKit->prod_id = Yii::$app->request->post('id');
            $pKit->save();

            return $this->renderAjax('add_kit_element',[
                'pKit' => $pKit,
            ]);
        }
        die();
    }

    /**
     * Delete item from kit
     */
    public function actionDeleteKit(){
        if(Yii::$app->request->post('id') != null){
            ProductKit::deleteAll(['id' => Yii::$app->request->post('id')]);
        }
        die();
    }
}
